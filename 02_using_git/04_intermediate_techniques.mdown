Intermediate Techniques
=======================

Tags
----

Some commits are more important than others.
For instance, the last commit to your PhD thesis before you hand it in would mark the submitted version of the thesis.
That's not necessarily the final one, maybe you'll still fix some typos for the version you upload to your website.
But it is an important version that you'd like to easily identify among all your commits.
Whenever a commit represents a milestone, you can use a *tag* to clearly identify it.

Assigning a tag to the latest commit requires just one simple command:

~~~bash
git tag -a <tag_name>
~~~

A text editor will open where you can enter a detailed description for the tag.
Close the file and the tag will be created.
To see the list of available tags, just type `git tag`.
If you want to temporarily set back your repository to a specific tag, run `git checkout <tag_name>`.
To revert to the most recent commit, type `git checkout master`.
This way you can easily reset the repository to important previous stages to check something out and then return to the most current version.

Let's give this a try.
First, run `git tag -a clean` to create tag for the current version of the repository.
We will now make some easily visible changes to the repository:

~~~bash
echo `we are creating a new file` > new_file
git add .
git commit -m "playing with tags"
~~~

Now when you type `ls`, you will see all the files in the repository, which includes `new_file`.
But now try `git checkout clean` followed by `ls` --- `new_file` is gone!
That's because we have reverted the repository to the point before we created that file. 

*Tip*: You might wonder why the command is `git tag -a <tag_name>` rather than just `git tag <tag_name>`.
The latter is also a valid command, but the `-a` switch tells git to create an *annotated* tag so that you can enter a description. 
There's no real downsides to creating annotated tags, so you should use them by default unless you know enough about git to determine when a *lightweight tag* without annotation is a better choice.


Throwing away modifications
---------------------------

While our little example for working with tags was instructive, it isn't something that should be part of the revision history.
Let's see what the revision history looks like right now.
Type `gitk`, which opens a GUI for browsing the history of the repository.
At the top of the history, you see our *playing with tags* commit as the most recent entry, with the *clean* tag preceding it.
Close the program and go back to the terminal, then type:

~~~bash
git reset --hard clean
~~~

Now start gitk again.
As you can see, the *playing with tags* commit is gone.
All the changes we have made since the *clean* tag have been completely wiped from the record.

Ideally, you won't have to use `git reset` very often.
In particular, do not use `git reset` to remove parts of the history that have already been synced to a remote repository.
This can seriously mess up the revision history of anyone else who also has access to the repository!
But sometimes you will want to experiment a bit and end up with crud in your history that should be excised before you push from your local repository to the remote.


Branches
--------

While adding and committing files is easy, it is a rather pointless exercise if you never do anything that uses the power of commits.
You might think that the main advantage is the ability to undo certain revisions and roll back everything to a previous state.
While that is indeed possible, git provides a tool that ideally will make such steps unnecessary: *branches*.

The idea behind branches is that a revision history shouldn't just be a linear string, but rather a graph.
Each branch in the graph represents a specific version of the repository that you can work on independently without affecting any of the other branches.
This sounds awfully abstract, but an example will make it clearer.

Suppose you are writing your first QP.
You have a git repository that contains all the files, and you have diligently documented the development of the QP with git commits.
At this point, your repository consists of a single branch, which is called *master*.
Every repository has such a master branch.
You aren't quite happy with the QP in its current form, but your advisor insists that you should send them the current draft so they can give you feedback.
Since there's no use in arguing, you send them the draft, but now what?
If you continue working on your draft, then it will be hard to incorporate the feedback --- your revisions will change page numbers, may change some phrasing, or completely drop some sections, so figuring out what the feedback was originally about will be tricky.
If you do not continue working on your draft, you lose valuable time.
You could make a copy of the whole repository and work on that copy while you wait for the feedback, which you can then incorporate into the original version.
But then you'll have a revised version and the copy you have been working on in the meantime, with no clear idea how the two could be recombined into one document.
That's a tough problem, but branches provide a simple solution:

1.  Create a tag *submitted_draft* with `git tag -a submitted_draft`.
1.  Continue working on the files in the master branch as you see fit.
1.  Once you get the feedback from your advisor, checkout the tag *submitted_draft* and create a branch *revisions*.

    ~~~bash
    git checkout submitted_draft -b revisions
    ~~~

1.  In the revisions branch, you now have all the files as they were in the submitted version.
    Incorporate your advisor's feedback.
1.  Use git to merge the *revisions* branch back into the master branch.

    ~~~bash   
    git checkout master
    git merge revisions
    ~~~

Let us once again try a hands-on example with this repository.
Let's start by adding some new files to the master branch and tagging the latest commit.

~~~bash
echo 'John likes Mary' > will_stay_the_same 
echo 'Peter likes Mary, too\n I think' > will_be_changed
echo 'Mary despises both' > will_be_deleted
git add .
git commit -m "added some test files"
git tag -a branching_point
~~~

Then we make a change in the master branch, just like you would make revisions to your paper in the example above.

~~~bash
echo 'Peter does not like Mary' > will_be_changed
git add .
git commit -m "made a change for testing purposes"
~~~

Now we create a branch starting from the tag *branching_point* and make some changes.

~~~bash
git checkout branching_point -b test_branch
echo 'A change is made in test_branch\n I think' > will_be_changed
rm will_be_deleted
git add .
git commit -m "some very different changes"
~~~

And now we have the big moment of truth, the merge step.

~~~bash
git checkout master
git merge test_branch
~~~

If you did everything right, you should now be looking at an error message *Merge conflict in will_be_changed*.
Awesome!
So what's up with that, and how can you fix it?


Resolving merge conflicts
-------------------------

Whenever you merge two branches that have both undergone changes since the branching point, there is a risk that the changes are incompatible.
In the example above, we changed the content of *will_be_changed* in *master* and *test_branch*.
We also deleted the file *will_be_deleted* in *test_branch*, but that's not a problem: since *will_be_deleted* has not changed at all in master branch, its deletion in the test_branch is the only modification since the branching point and can be applied automatically.
For *will_be_changed*, on the other hand, it is not clear which change to apply because the two branches disagree on how the file should have developed since the branching point.
So it is up to you to step in and decide which change to use.

Open *will_be_changed* in a text editor of your choice.
You should see the following:

~~~
<<<<<<< HEAD
A change is made in test_branch
=======
Peter likes Mary, too
>>>>>>> master
I think
~~~

Above the `=======` you see the change from the branch you are trying to merge into *master*, below it is what this line currently looks like in *master*.
Pick the line you want to keep, delete everything else between `<<<<<<< HEAD` and `>>>>>>> master` (including those lines themselves), then save the file.
In the terminal, you now proceed exactly like after any other file editing session.

~~~bash
git add will_be_changed
git commit -m "fixed Merge conflict"
~~~

Merge conflicts will arise once in a while when you use branches.
This should not discourage you from using them, though --- branches are very powerful, and git is very good at auto-merging most changes.
It is only when you keep working on two diverging versions of the same file that you run into Merge conflicts, and those occasions are rare.

*Further reading:* Git branches are a very flexible tool and allow a variety of workflows for coding, collaborative writing, data archiving, and much more. A quick perusal of Google will provide tons of ideas.


Branches With Remote Repositories
---------------------------------

Just like the master branch, branches you create can be synced to a remote repository with the `push` command.

~~~bash
git checkout test_branch
git push -u origin test_branch
~~~

The `-u` parameter sets `origin test_branch` as the default push location for this branch.
So when you are inside `test_branch`, a simple `git push` will sync changes to `origin test_branch`.
But if are in the `master` branch instead, `git push` pushes to `origin master`.

