Working with Remote Repositories
=================================

## Remote repositories: pull and push

You now know how to use a repository on your computer, but git also allows you to sync repositories across computers.
To do this, you need access to a git server.
You can set up your own or use a service like *GitHub* or *gitlab*.
A repository that is stored on a server is called a *remote repository*.

If you cloned a repository from somewhere else, the location you cloned it from is already set up as a remote repository with the name *origin*.
You can then use the git command `pull` to get the newest version of the repository from the remote, and `push` to upload your latest commits to the repository.
The full syntax is `git pull/push <name_of_remote_repository> <branch>`.
Branches will be discussed later, for now you only need to know that by default every repository has a main branch, which is called *master*.
So if you aren't working with branches and are using the *origin* repository, the template above reduces to:

~~~bash
git pull origin master

git push origin master
~~~

If you `git pull -u origin master` and `git push -u origin master`, git will remember that you want to pull/push from/to this remote repository and branch by default.
From then on, you can just use `git pull` and `git push`.


## Access rights and forking

If you try doing the above with the training repository you cloned at the beginning of this tutorial, `git pull origin master` will work find but `git push origin master` will give you an error message.
That's because you only have read access to the remote repository, not write access --- it is not your repository after all, so why should you be allowed to change it?

In order to use `git push`, you need a repository with write-access.
We will create one on GitHub and add it as a remote repository.
On the GitHub page for the repository, you can see a button named *Fork*.
When you click it, GitHub will create a copy of the repository for your user account.
In that forked repository, click on the Clone button and copy the URL.
Make sure you are in your local repository in the terminal, then enter the following:

~~~bash
git remote add my_fork <URL to your repository>
~~~

Now you can push your changes to your fork with `git push my_fork master`.
And on any other computer you can get the most recent changes with `git pull my_fork master`.
The GitHub repository thus acts as a central sharing point for synchronizing your work across multiple computers.

Of course you could have just created a completely new repository that is directly cloned from your fork.
Inside that repository you would still use `git push origin master`.
The `git remote add` command is only used when you want to add a remote to an existing repository.


## GitHub only: pull requests

But what if you want to upload a change to the repository you do not have write access to?
For example, there might be several typos that you fixed, so it would make sense to incorporate those changes into the official repository, not just your fork.
For these situations, GitHub offers pull requests.
Check [GitHub's tutorial](https://help.github.com/articles/about-pull-requests/) for more information.
